{"version":3,"sources":["countries/countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countries","App","React","useState","name","console","log","useEffect","a","$","on","searchCountry","val","trim","queryURLc","diseases","countryCode","settings","process","ajax","done","response","alpha3Code","html","i","queryURLg","url","type","dataType","data","year","fact","Dim","find","dimObject","category","tblRow","value","display","code","append","length","Date","getFullYear","Countries","Country","TotalConfirmed","TotalDeaths","TotalRecovered","Math","trunc","catch","error","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","analytics","wait","className","id","placeholder","map","country","scope","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"sFAqMAA,EAAOC,QAAU,CAACC,UApMG,CAAC,cACpB,UACA,UACA,UACA,SACA,sBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,mCACA,yBACA,WACA,SACA,oBACA,WACA,eACA,UACA,aACA,WACA,WACA,SACA,2BACA,OACA,QACA,QACA,WACA,UACA,QACA,eACA,aACA,UACA,OACA,SACA,UACA,mBACA,wCACA,mCACA,UACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,UACA,UACA,QACA,YACA,6BACA,OACA,UACA,SACA,QACA,UACA,QACA,SACA,aACA,QACA,WACA,SACA,aACA,mCACA,SACA,UACA,UACA,UACA,QACA,YACA,aACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,mCACA,SACA,WACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,cACA,YACA,QACA,UACA,OACA,SACA,OACA,WACA,QACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,oBACA,sBACA,UACA,qBACA,SACA,wBACA,cACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,YACA,SACA,cACA,uBACA,aACA,WACA,4CACA,cACA,OACA,QACA,sBACA,UACA,SACA,eACA,SACA,SACA,UACA,uBACA,iBACA,8BACA,2BACA,UACA,aACA,UACA,qCACA,WACA,QACA,SACA,c,6QCqCaC,MA7Nf,WAAgB,IAAD,EACWC,IAAMC,SAAS,QAD1B,mBACNC,EADM,KAiJb,OAjJa,KAGbC,QAAQC,IAAI,CAACF,SACbC,QAAQC,IAAI,CAACN,wBAEbE,IAAMK,WAAU,WAAU,4CACxB,4BAAAC,EAAA,sDACE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","file":"static/js/main.4c780814.chunk.js","sourcesContent":["\r\n  const  countries = ['Afghanistan',\r\n  'Albania',\r\n  'Algeria',\r\n  'Andorra',\r\n  'Angola',\r\n  'Antigua and Barbuda',\r\n  'Argentina',\r\n  'Armenia',\r\n  'Australia',\r\n  'Austria',\r\n  'Azerbaijan',\r\n  'Bahamas',\r\n  'Bahrain',\r\n  'Bangladesh',\r\n  'Barbados',\r\n  'Belarus',\r\n  'Belgium',\r\n  'Belize',\r\n  'Benin',\r\n  'Bhutan',\r\n  'Bolivia (Plurinational State of)',\r\n  'Bosnia and Herzegovina',\r\n  'Botswana',\r\n  'Brazil',\r\n  'Brunei Darussalam',\r\n  'Bulgaria',\r\n  'Burkina Faso',\r\n  'Burundi',\r\n  'Cabo Verde',\r\n  'Cambodia',\r\n  'Cameroon',\r\n  'Canada',\r\n  'Central African Republic',\r\n  'Chad',\r\n  'Chile',\r\n  'China',\r\n  'Colombia',\r\n  'Comoros',\r\n  'Congo',\r\n  'Cook Islands',\r\n  'Costa Rica',\r\n  'Croatia',\r\n  'Cuba',\r\n  'Cyprus',\r\n  'Czechia',\r\n  \"CÃ´te d'Ivoire\",\r\n  \"Democratic People's Republic of Korea\",\r\n  'Democratic Republic of the Congo',\r\n  'Denmark',\r\n  'Djibouti',\r\n  'Dominica',\r\n  'Dominican Republic',\r\n  'Ecuador',\r\n  'Egypt',\r\n  'El Salvador',\r\n  'Equatorial Guinea',\r\n  'Eritrea',\r\n  'Estonia',\r\n  'Ethiopia',\r\n  'Fiji',\r\n  'Finland',\r\n  'France',\r\n  'Gabon',\r\n  'Gambia',\r\n  'Georgia',\r\n  'Germany',\r\n  'Ghana',\r\n  'Greece',\r\n  'Grenada',\r\n  'Guatemala',\r\n  'Guinea',\r\n  'Guinea-Bissau',\r\n  'Guyana',\r\n  'Haiti',\r\n  'Honduras',\r\n  'Hungary',\r\n  'Iceland',\r\n  'India',\r\n  'Indonesia',\r\n  'Iran (Islamic Republic of)',\r\n  'Iraq',\r\n  'Ireland',\r\n  'Israel',\r\n  'Italy',\r\n  'Jamaica',\r\n  'Japan',\r\n  'Jordan',\r\n  'Kazakhstan',\r\n  'Kenya',\r\n  'Kiribati',\r\n  'Kuwait',\r\n  'Kyrgyzstan',\r\n  \"Lao People's Democratic Republic\",\r\n  'Latvia',\r\n  'Lebanon',\r\n  'Lesotho',\r\n  'Liberia',\r\n  'Libya',\r\n  'Lithuania',\r\n  'Luxembourg',\r\n  'Madagascar',\r\n  'Malawi',\r\n  'Malaysia',\r\n  'Maldives',\r\n  'Mali',\r\n  'Malta',\r\n  'Marshall Islands',\r\n  'Mauritania',\r\n  'Mauritius',\r\n  'Mexico',\r\n  'Micronesia (Federated States of)',\r\n  'Monaco',\r\n  'Mongolia',\r\n  'Montenegro',\r\n  'Morocco',\r\n  'Mozambique',\r\n  'Myanmar',\r\n  'Namibia',\r\n  'Nauru',\r\n  'Nepal',\r\n  'Netherlands',\r\n  'New Zealand',\r\n  'Nicaragua',\r\n  'Niger',\r\n  'Nigeria',\r\n  'Niue',\r\n  'Norway',\r\n  'Oman',\r\n  'Pakistan',\r\n  'Palau',\r\n  'Panama',\r\n  'Papua New Guinea',\r\n  'Paraguay',\r\n  'Peru',\r\n  'Philippines',\r\n  'Poland',\r\n  'Portugal',\r\n  'Qatar',\r\n  'Republic of Korea',\r\n  'Republic of Moldova',\r\n  'Romania',\r\n  'Russian Federation',\r\n  'Rwanda',\r\n  'Saint Kitts and Nevis',\r\n  'Saint Lucia',\r\n  'Saint Vincent and the Grenadines',\r\n  'Samoa',\r\n  'San Marino',\r\n  'Sao Tome and Principe',\r\n  'Saudi Arabia',\r\n  'Senegal',\r\n  'Serbia',\r\n  'Seychelles',\r\n  'Sierra Leone',\r\n  'Singapore',\r\n  'Slovakia',\r\n  'Slovenia',\r\n  'Solomon Islands',\r\n  'Somalia',\r\n  'South Africa',\r\n  'South Sudan',\r\n  'Spain',\r\n  'Sri Lanka',\r\n  'Sudan',\r\n  'Suriname',\r\n  'Swaziland',\r\n  'Sweden',\r\n  'Switzerland',\r\n  'Syrian Arab Republic',\r\n  'Tajikistan',\r\n  'Thailand',\r\n  'The former Yugoslav Republic of Macedonia',\r\n  'Timor-Leste',\r\n  'Togo',\r\n  'Tonga',\r\n  'Trinidad and Tobago',\r\n  'Tunisia',\r\n  'Turkey',\r\n  'Turkmenistan',\r\n  'Tuvalu',\r\n  'Uganda',\r\n  'Ukraine',\r\n  'United Arab Emirates',\r\n  'United Kingdom',\r\n  'United Republic of Tanzania',\r\n  'United States of America',\r\n  'Uruguay',\r\n  'Uzbekistan',\r\n  'Vanuatu',\r\n  'Venezuela (Bolivarian Republic of)',\r\n  'Viet Nam',\r\n  'Yemen',\r\n  'Zambia',\r\n  'Zimbabwe'\r\n];\r\n\r\nmodule.exports = {countries};","import React from 'react';\n// import logo from './logo.svg';\nimport './assets/css/reset.css';\nimport './assets/css/style.css';\nimport firebase from 'firebase';\n\nimport {countries} from './countries/countries';\n\nimport $ from 'jquery';\n\nfunction App() {\n  const [name, setName] = React.useState(\"Marc\");\n  // setName(\"Erica\");\n  console.log({name});\n  console.log({countries});\n\n  React.useEffect(function(){\n    async function wait(){\n      $(\".btn\").on(\"click\", async function() {\n        var searchCountry = $(\"#country\").val().trim() || $(\"#selectedCountry\").val().trim();\n        // var searchDisease = $(\"#disease\").val().trim();\n\n        console.log(\"Search Country: \", searchCountry);\n      \n        var queryURLc = \"https://api.covid19api.com/summary\";\n      \n        //Coronavirus confirmed,deaths,recovered by Country\n        //https://api.covid19api.com/summary\n      \n        //Coronavirus Confirmed Cases By Country\n        //https://api.covid19api.com/country/south-africa/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-04-01T00:00:00Z\n      \n        //Provisional COVID-19 Death Counts by Sex, Age, and State\n        //https://data.cdc.gov/resource/9bhg-hcku.json\n      \n        //General Disease API\n        //https://apps.who.int/gho/athena/api/GHO/WHS3_40.json?filter=COUNTRY:USA\n      \n       \n      \n        var diseases = [\"Cholera\", \"Diptheria\", \"Japanese Encephalitis\", \"Pertussis\", \"Leprosy\", \"Total Tetanus\", \"Meningitis\", \"Malaria\",\n          \"Poliomyelitis\", \"Yellow Fever\", \"H5N1 Influenze\", \"Plague\", \"Mupms\", \"Tuberculosis\", \"Congenital Rubella Syndrome\",\n          \"Neonatal Tetatnus\", \"Total Rubella\"];\n      \n        var countryCode = \"\";\n        var settings = {\n          \"async\": true,\n          \"crossDomain\": true,\n          \"url\": \"https://restcountries-v1.p.rapidapi.com/name/\" + searchCountry,\n          \"method\": \"GET\",\n          \"headers\": {\n          \"x-rapidapi-host\": \"restcountries-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_RAPIDCOUNTRYCODE_API_KEY\n          }\n        }\n        \n        await $.ajax(settings).done(function (response) {\n          countryCode = response[0].alpha3Code;\n          console.log(countryCode);\n        });\n  \n        $(\"#table2\").html(\"<tr>\");\n        for(let i=0; i<diseases.length; ++i){\n          var queryURLg = \"https://apps.who.int/gho/athena/api/GHO/WHS3_\" + (40 + i) + \".json?filter=COUNTRY:\" + countryCode;\n      \n          $.ajax({\n            url: queryURLg,\n            type: \"GET\",\n            dataType: \"jsonp\"\n        \n          }).done(function(data) {\n            var response = data;\n  \n            var year = response && response.fact && response.fact[0] && response.fact[0].Dim && response.fact[0].Dim.find(function(dimObject){\n              if(dimObject.category === \"YEAR\"){\n                return true;\n              }\n            });\n  \n            // console.log(year);\n            \n                 \n            var tblRow = $(\"<tr>\" + \n            \"<td>\" + searchCountry + \"</td>\" + \n            \"<td>\" + diseases[i] + \"</td>\" + \n            \"<td>\" + (response && response.fact && response.fact[0] && response.fact[0].value && response.fact[0].value.display || \"No Data\") + \"</td>\" + \n            \"<td>\" + (year && year.code || \"No Data\") + \"</td>\" +\n            \"</tr>\");\n            \n            $(\"#table2\").append(tblRow);\n          });\n      \n        }\n        \n      \n        $.ajax({\n          url: queryURLc,\n          type: \"GET\",\n      \n        }).done(function(data) {\n          var response = data;\n          var today = new Date();\n          var year = today.getFullYear();\n\n          console.log(\"Table 1\",response);\n      \n          for(let i=0; i<response.Countries.length; ++i){\n            if(response.Countries[i].Country == searchCountry){\n              // console.log(response.Countries[i]);\n              var tblRow = $(\"<tr>\" + \n              \"<td>\" + response.Countries[i].Country + \"</td>\" + \n              \"<td>\" + \"COVID-19\" + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalConfirmed + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalDeaths + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalRecovered + \"</td>\" + \n              \"<td>\" + Math.trunc(response.Countries[i].TotalDeaths/response.Countries[i].TotalConfirmed*100) + \"%</td>\" + \n              \"<td>\" + year + \"</td>\" + \n              \"</tr>\");\n              console.log(\"TableRow\", tblRow);\n              $(\"#table1\").append(tblRow);\n      \n            }else{\n              //append to buttom of form, country or disease not found\n            }\n            \n          }\n        })\n        .catch(function(error){\n          console.log(\"table1Error\", error);\n        });\n        $(\"#country\").val(\"\");\n      });\n  \n      // Your web app's Firebase configuration\n      var firebaseConfig = {\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n        authDomain: \"groupproject1-73c74.firebaseapp.com\",\n        databaseURL: \"https://groupproject1-73c74.firebaseio.com\",\n        projectId: \"groupproject1-73c74\",\n        storageBucket: \"groupproject1-73c74.appspot.com\",\n        messagingSenderId: \"398999884281\",\n        appId: \"1:398999884281:web:7eac86826ce3abc07fad28\",\n        measurementId: \"G-VQXFZW71R4\"\n      };\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics();\n  \n      console.log(firebase);\n\n    }\n    wait();\n\n  },[]);\n\n  return (\n  <>\n    <header>\n        <div className=\"text-box\">\n  <h1>COVID-19 Tracker</h1>\n            <p>Compare COVID-19 to Infectious Diseases Worldwide</p>\n        </div>\n    </header>\n\n\n    <div className=\"container\">\n        <div className=\"form-row\">\n            <div className=\"col\">\n                <input type=\"text\" id=\"country\" className=\"form-control\" placeholder=\"Country\"/>\n            </div>\n\n            <select id=\"selectedCountry\">\n              {countries.map(function(country){\n                return (<option value={country}>{country}</option>)\n              })}\n            </select>\n            {/* <!-- <div className=\"col\">\n                <input type=\"text\" id=\"disease\" className=\"form-control\" placeholder=\"Disease\"/>\n            </div> --> */}\n            <button className=\"btn btn-primary\" type=\"search\">Search</button>\n        </div>\n    </div>\n\n\n    <div className=\"card\">\n        <div className=\"table table-responsive pre-scrollable\">\n            <table className=\"table table-bordered table-hover\">\n                <thead className=\"thead-dark scroll\">\n                    <tr>\n                        <th scope=\"col\">Country</th>\n                        <th scope=\"col\">Disease</th>\n                        <th scope=\"col\">Confirmed Cases</th>\n                        <th scope=\"col\">Deaths</th>\n                        <th scope=\"col\">Recovered</th>\n                        <th scope=\"col\">Mortalilty Rate</th>\n                        <th scope=\"col\">Year</th>\n                    </tr>\n                </thead>\n                <tbody id=\"table1\">\n\n                </tbody>\n\n            </table>\n        </div>\n    </div>\n\n    <div className=\"card\">\n            <div className=\"table table-responsive pre-scrollable\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            <th scope=\"col\">Country</th>\n                            <th scope=\"col\">Disease</th>\n                            <th scope=\"col\">Cases</th>\n                            <th scope=\"col\">Year</th>\n                        </tr>\n\n                    </thead>\n                    <tbody id=\"table2\">\n                        \n                    </tbody>\n\n                </table>\n            </div>\n      </div>\n\n    <div className=\"footer\"> Copyright 2020 &copy; Jessica VC | Marc M | Rafael </div>\n  </>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}