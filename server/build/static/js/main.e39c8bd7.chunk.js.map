{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useEffect","a","$","on","searchCountry","val","trim","queryURLc","diseases","countryCode","settings","process","ajax","done","response","alpha3Code","console","log","i","queryURLg","url","type","dataType","data","year","fact","Dim","find","dimObject","category","tblRow","value","display","code","append","length","Date","getFullYear","Countries","Country","TotalConfirmed","TotalDeaths","TotalRecovered","Math","trunc","html","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","analytics","wait","className","id","placeholder","scope","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e39c8bd7.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './assets/css/reset.css';\nimport './assets/css/style.css';\nimport firebase from 'firebase';\n\nimport $ from 'jquery';\n\nfunction App() {\n\n  React.useEffect(function(){\n    async function wait(){\n      $(\".btn\").on(\"click\", async function() {\n        var searchCountry = $(\"#country\").val().trim();\n        // var searchDisease = $(\"#disease\").val().trim();\n      \n        var queryURLc = \"https://api.covid19api.com/summary\";\n      \n        //Coronavirus confirmed,deaths,recovered by Country\n        //https://api.covid19api.com/summary\n      \n        //Coronavirus Confirmed Cases By Country\n        //https://api.covid19api.com/country/south-africa/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-04-01T00:00:00Z\n      \n        //Provisional COVID-19 Death Counts by Sex, Age, and State\n        //https://data.cdc.gov/resource/9bhg-hcku.json\n      \n        //General Disease API\n        //https://apps.who.int/gho/athena/api/GHO/WHS3_40.json?filter=COUNTRY:USA\n      \n       \n      \n        var diseases = [\"Cholera\", \"Diptheria\", \"Japanese Encephalitis\", \"Pertussis\", \"Leprosy\", \"Total Tetanus\", \"Meningitis\", \"Malaria\",\n          \"Poliomyelitis\", \"Yellow Fever\", \"H5N1 Influenze\", \"Plague\", \"Mupms\", \"Tuberculosis\", \"Congenital Rubella Syndrome\",\n          \"Neonatal Tetatnus\", \"Total Rubella\"];\n      \n        var countryCode = \"\";\n        var settings = {\n          \"async\": true,\n          \"crossDomain\": true,\n          \"url\": \"https://restcountries-v1.p.rapidapi.com/name/\" + searchCountry,\n          \"method\": \"GET\",\n          \"headers\": {\n          \"x-rapidapi-host\": \"restcountries-v1.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_RAPIDCOUNTRYCODE_API_KEY\n          }\n        }\n        \n        await $.ajax(settings).done(function (response) {\n          countryCode = response[0].alpha3Code;\n          console.log(countryCode);\n        });\n  \n        \n        for(let i=0; i<diseases.length; ++i){\n          var queryURLg = \"https://apps.who.int/gho/athena/api/GHO/WHS3_\" + (40 + i) + \".json?filter=COUNTRY:\" + countryCode;\n      \n          $.ajax({\n            url: queryURLg,\n            type: \"GET\",\n            dataType: \"jsonp\"\n        \n          }).done(function(data) {\n            var response = data;\n  \n            var year = response && response.fact && response.fact[0] && response.fact[0].Dim && response.fact[0].Dim.find(function(dimObject){\n              if(dimObject.category === \"YEAR\"){\n                return true;\n              }\n            });\n  \n            console.log(year);\n            \n                 \n            var tblRow = $(\"<tr>\" + \n            \"<td>\" + searchCountry + \"</td>\" + \n            \"<td>\" + diseases[i] + \"</td>\" + \n            \"<td>\" + (response && response.fact && response.fact[0] && response.fact[0].value && response.fact[0].value.display || \"No Data\") + \"</td>\" + \n            \"<td>\" + (year && year.code || \"No Data\") + \"</td>\" +\n            \"</tr>\");\n      \n            $(\"#table2\").append(tblRow);\n          });\n      \n        }\n        \n      \n        $.ajax({\n          url: queryURLc,\n          type: \"GET\",\n      \n        }).done(function(data) {\n          var response = data;\n          var today = new Date();\n          var year = today.getFullYear();\n      \n          for(let i=0; i<186; ++i){\n            if(response.Countries[i].Country == searchCountry){\n              // console.log(response.Countries[i]);\n              var tblRow = $(\"<tr>\" + \n              \"<td>\" + response.Countries[i].Country + \"</td>\" + \n              \"<td>\" + \"COVID-19\" + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalConfirmed + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalDeaths + \"</td>\" + \n              \"<td>\" + response.Countries[i].TotalRecovered + \"</td>\" + \n              \"<td>\" + Math.trunc(response.Countries[i].TotalDeaths/response.Countries[i].TotalConfirmed*100) + \"%</td>\" + \n              \"<td>\" + year + \"</td>\" + \n              \"</tr>\");\n              $(\"#table1\").html(tblRow);\n      \n            }else{\n              //append to buttom of form, country or disease not found\n            }\n            \n          }\n        });\n      });\n  \n      // Your web app's Firebase configuration\n      var firebaseConfig = {\n        apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n        authDomain: \"groupproject1-73c74.firebaseapp.com\",\n        databaseURL: \"https://groupproject1-73c74.firebaseio.com\",\n        projectId: \"groupproject1-73c74\",\n        storageBucket: \"groupproject1-73c74.appspot.com\",\n        messagingSenderId: \"398999884281\",\n        appId: \"1:398999884281:web:7eac86826ce3abc07fad28\",\n        measurementId: \"G-VQXFZW71R4\"\n      };\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics();\n  \n      console.log(firebase);\n\n    }\n    wait();\n\n  },[]);\n\n  return (\n  <>\n    <header>\n        <div className=\"text-box\">\n            <h1>COVID-19 Tracker</h1>\n            <p>Compare COVID-19 to Infectious Diseases Worldwide</p>\n        </div>\n    </header>\n\n\n    <div className=\"container\">\n        <div className=\"form-row\">\n            <div className=\"col\">\n                <input type=\"text\" id=\"country\" className=\"form-control\" placeholder=\"Country\"/>\n            </div>\n            {/* <!-- <div className=\"col\">\n                <input type=\"text\" id=\"disease\" className=\"form-control\" placeholder=\"Disease\"/>\n            </div> --> */}\n            <button className=\"btn btn-primary\" type=\"search\">Search</button>\n        </div>\n    </div>\n\n\n    <div className=\"card\">\n        <div className=\"table table-responsive table-wrapper-scroll-y my-custom-scrollbar\">\n            <table className=\"table table-bordered table-hover\">\n                <thead className=\"thead-dark scroll\">\n                    <tr>\n                        <th scope=\"col\">Country</th>\n                        <th scope=\"col\">Disease</th>\n                        <th scope=\"col\">Confirmed Cases</th>\n                        <th scope=\"col\">Deaths</th>\n                        <th scope=\"col\">Recovered</th>\n                        <th scope=\"col\">Mortalilty Rate</th>\n                        <th scope=\"col\">Year</th>\n                    </tr>\n                </thead>\n                <tbody id=\"table1\">\n\n                </tbody>\n\n            </table>\n        </div>\n    </div>\n\n    <div className=\"card\">\n            <div className=\"table table-responsive table-wrapper-scroll-y my-custom-scrollbar\">\n                <table className=\"table table-bordered table-hover\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            <th scope=\"col\">Country</th>\n                            <th scope=\"col\">Disease</th>\n                            <th scope=\"col\">Cases</th>\n                            <th scope=\"col\">Year</th>\n                        </tr>\n\n                    </thead>\n                    <tbody id=\"table2\">\n                        \n                    </tbody>\n\n                </table>\n            </div>\n      </div>\n\n    <div className=\"footer\"> Copyright 2020 &copy; Jessica VC | Marc M | Rafael </div>\n  </>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}